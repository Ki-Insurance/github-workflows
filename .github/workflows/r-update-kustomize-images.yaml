on:
  workflow_call:
    inputs:
      overlay:
        description: 'Dst kustomization overlay to update'
        required: true
        type: string
      images:
        description: 'JSON object of `images` from src kustomize overlay'
        required: true
        type: 'string'
      create_pr:
        description: 'Create a pull request? defaults to true'
        type: boolean
        required: false
        default: true
      #Must be specified if create_pr=true
      #Teams/collaborators listed here must have at least read access to the repository
      pull_request_reviewers:
        description: 'Comma separated list of pull request reviewers; eg monalisa,hubot'
        type: string
        required: false
        default: ''
      git_author_name:
        description: 'Name of author to assign to commits'
        type: string
      git_author_email:
        description: 'Email of author to assign to commits'
        type: string
      branch:
        description: 'Branch to checkout if creating a PR; defaults to github.event.repository.default_branch'
        type: string
        required: false
        default: ${{ github.event.repository.default_branch }}
      base:
        description: 'Base branch of pull request; defaults to github.event.repository.default_branch'
        type: string
        required: false
        default: ${{ github.event.repository.default_branch }}
      copy_docker_image:
        description: 'Should docker images be synced from `newName` in inputs.images to `newName` in inputs.overlay?'
        type: boolean
        required: false
        default: false
    secrets:
      src_image_docker_username:
        description: 'src image docker username'
        required: false
      src_image_docker_password:
        description: 'src image docker password'
        required: false
      dst_image_docker_username:
        description: 'dst image docker username'
        required: false
      dst_image_docker_password:
        description: 'dst image docker password'
        required: false
      override_github_token:
        description: 'Non default github token to use for commits'
        required: false
# Ensure that an overlay can only be committed to one at a time
concurrency: ${{ inputs.overlay }}
jobs:
  update-image:
    name: Update images for ${{ inputs.overlay }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Maybe check if branch ${{ inputs.branch }} exists
        id: should-create-branch
        if: inputs.branch != inputs.base
        run: |
          git ls-remote --exit-code origin "${{ inputs.branch }}" && create=false || create=true
          echo "Create branch '${{ inputs.branch }}'? $create"
          echo "::set-output name=result::$create"
      - name: Maybe create branch ${{ inputs.branch }}
        if: ${{ inputs.branch != inputs.base && steps.should-create-branch.outputs.result == 'true' }}
        run: |
          git checkout -b "${{ inputs.branch }}"
          git push origin "${{ inputs.branch }}"
      - uses: actions/checkout@v2
        with:
          ref: "${{ inputs.branch }}"
          token: ${{ secrets.override_github_token || secrets.GITHUB_TOKEN }}
      - uses: imranismail/setup-kustomize@v1
      - name: Update "${{ inputs.overlay }}"
        run: |
          git config user.name "${{ inputs.git_author_name }}"
          git config user.email "${{ inputs.git_author_email }}"
          cd "${{ inputs.overlay }}"
          for name in $(echo '${{ inputs.images }}' | jq -r '.[].name'); do
            newTag=$(echo '${{ inputs.images }}' | jq -r --arg name "$name" '.[] | select(.name == $name) | .newTag')
            kustomize edit set image "$name=*:$newTag"
            git add .
            git commit -m "Set image $name in ${{ inputs.overlay }} to $newTag"
          done
          git push origin "${{ inputs.branch }}"
      - name: kustomize build
        run: kustomize build ${{ inputs.overlay }}
      - name: Maybe create pull-request
        if: inputs.create_pr && inputs.branch != inputs.base
        env:
          GITHUB_TOKEN: ${{ secrets.override_github_token || secrets.GITHUB_TOKEN }}
        run: |
          echo -e '*Automated PR*\n\nUpdates ${{ inputs.overlay }} with newTag from images\n```\n${{ inputs.images }}\n```\n' > /tmp/body
          gh pr create --title '[CI] Promote images in ${{ inputs.overlay }}' --body-file "/tmp/body" \
              --label "automated" --label "infra" --reviewer "${{ inputs.pull_request_reviewers }}" \
              --base "${{ inputs.base }}" || gh pr edit --body-file="/tmp/body"
  promote-images:
    name: Push image from src to dst
    runs-on: ubuntu-latest
    if: inputs.copy_docker_image
    needs: [ update-image ]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ inputs.branch }}
      - name: Get updated images from overlay
        uses: mikefarah/yq@v4.26.1
        id: images
        with:
          cmd: yq -o json '.images' ${{ inputs.overlay }}/kustomization.yaml
      - name: Promote images
        run: |
          for name in $(echo '${{ steps.images.outputs.result }}' | jq -r '.[].name'); do
            oldName=$(echo '${{ inputs.images }}' | jq --arg name "$name" -r '.[] | select(.name == $name) | .newName')
            newName=$(echo '${{ steps.images.outputs.result }}' | jq --arg name "$name" -r '.[] | select(.name == $name) | .newName')
            newTag=$(echo '${{ steps.images.outputs.result }}' | jq --arg name "$name" -r '.[] | select(.name == $name) | .newTag')

            if [[ "$newName" != "$oldName" ]]; then
              echo "Now pushing $oldName:$newTag to $newName:$newTag"
              docker login -u '${{ secrets.src_image_docker_username }}' -p '${{ secrets.src_image_docker_password }}' "$oldName"
              docker pull "$oldName:$newTag"
              docker tag "$oldName:$newTag" "$newName:$newTag"
              docker login -u '${{ secrets.dst_image_docker_username }}' -p '${{ secrets.dst_image_docker_password }}' "$newName"
              docker push "$newName:$newTag"
            else
              echo "$newName == $oldName - skipping..."
            fi
          done
